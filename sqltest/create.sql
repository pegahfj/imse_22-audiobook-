
CREATE TABLE AUTHORS (
    id INTEGER GENERATED ALWAYS AS IDENTITY 
        (START WITH 10 INCREMENT BY 10) PRIMARY KEY,
    auth_name TEXT NOT NULL,
	countryOforigins VARCHAR ( 50 ) NOT NULL
);
CREATE TABLE CATEGORIES (
    id INTEGER GENERATED ALWAYS AS IDENTITY 
        (START WITH 10 INCREMENT BY 10) PRIMARY KEY,
    title VARCHAR ( 50 ) CHECK (title IN ('Non-Fiction', 'Fiction', 'Sci-Fi', 'Thriller', 'Romance')) NOT NULL,
);
CREATE TABLE AUDBOOKS (
	id INTEGER GENERATED ALWAYS AS IDENTITY 
        (START WITH 10 INCREMENT BY 10) PRIMARY KEY,
    category_id INTEGER REFERENCES CATEGORIES(id) UNIQUE,
    author_id INTEGER REFERENCES AUTHORS(id) UNIQUE,
	title VARCHAR ( 50 ) UNIQUE NOT NULL,
	lang VARCHAR ( 50 ) CHECK (lang IN ('English', 'German', 'French', 'Spanish')) NOT NULL,
    dur TIME,
    rating INTEGER CHECK (rating between 0 and 5),
    FOREIGN KEY (category_id, author_id) ON DELETE CASCADE
);
CREATE TABLE USERS (
	id INTEGER GENERATED ALWAYS AS IDENTITY 
        (START WITH 10 INCREMENT BY 10) PRIMARY KEY,
	username VARCHAR ( 50 ) UNIQUE NOT NULL,
	email VARCHAR ( 255 ) UNIQUE NOT NULL,
	password VARCHAR ( 50 ) NOT NULL
);
CREATE TABLE user_subscription (
    user_id INTEGER REFERENCES USERS(id) UNIQUE,
    subs_type INTEGER CHECK (subs_type IN (6, 12, 24)),
    created_on DATE NOT NULL,
    PRIMARY KEY (user_id)
);
CREATE TABLE user_collection (
    id INTEGER GENERATED ALWAYS AS IDENTITY 
        (START WITH 10 INCREMENT BY 10) PRIMARY KEY,
    user_id INTEGER REFERENCES USERS(id) UNIQUE
);
CREATE TABLE collection_book (
    collection_id INTEGER REFERENCES user_collection(id),
    book_id INTEGER REFERENCES AUDBOOKS(id),
    PRIMARY KEY (collection_id, book_id)   
);
